generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                       String                @id @default(cuid())
  name                     String?
  email                    String                @unique
  emailVerified            DateTime?
  image                    String?
  password                 String?
  passwordChangedAt        DateTime?             @default(now())
  role                     String                @default("VIEWER")
  department               String?
  departmentRole           String?
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  accounts                 Account[]
  createdClauses           Clause[]              @relation("CreatedClauses")
  clauseApprovals          ClauseApproval[]      @relation("ClauseApprovals")
  clauseUsages             ClauseUsage[]         @relation("ClauseUsages")
  createdCompanies         Company[]             @relation("CreatedCompanies")
  companyInvites           CompanyInvite[]       @relation("InvitedUser")
  companyUsers             CompanyUser[]
  assignedContracts        Contract[]            @relation("AssignedContracts")
  updatedContracts         Contract[]            @relation("UpdatedContracts")
  createdContracts         Contract[]            @relation("CreatedContracts")
  approvals                ContractApproval[]    @relation("ApprovalsByUser")
  uploadedAttachments      ContractAttachment[]  @relation("UploadedAttachments")
  createdTemplates         ContractTemplate[]    @relation("CreatedTemplates")
  passwordHistory          PasswordHistory[]
  sessions                 Session[]
  userSessions             UserSession[]         @relation("UserSessions")
  teams                    UsersOnTeams[]
  contractVersions         ContractVersion[]
  digitalSignatures        DigitalSignature[]
  notificationSettings     NotificationSettings?
  notifications            Notification[]
  createdSignaturePackages SignaturePackage[]
  savedReports             SavedReport[]
  managerId                String?
  manager                  User?    @relation("ManagerSubordinates", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates             User[]   @relation("ManagerSubordinates")

  @@index([email])
  @@index([role])
  @@index([createdAt])
}

model TokenBlacklist {
  id        String   @id @default(cuid())
  tokenId   String   @unique
  reason    String   @default("logout")
  createdAt DateTime @default(now())

  @@index([tokenId])
  @@index([createdAt])
}

model PasswordHistory {
  id           String   @id @default(cuid())
  userId       String
  passwordHash String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model LoginAttempt {
  id             String    @id @default(cuid())
  identifier     String    @unique
  failedAttempts Int       @default(0)
  lockedUntil    DateTime?
  lastAttemptIp  String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([identifier])
  @@index([lockedUntil])
}

model UserSession {
  id                 String            @id @default(cuid())
  userId             String
  deviceInfo         Json
  isActive           Boolean           @default(true)
  lastActivity       DateTime          @default(now())
  createdAt          DateTime          @default(now())
  expiresAt          DateTime
  invalidatedAt      DateTime?
  invalidationReason String?
  activities         SessionActivity[]
  user               User              @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
  @@index([expiresAt])
  @@index([lastActivity])
  @@index([createdAt])
}

model SessionActivity {
  id        String      @id @default(cuid())
  sessionId String
  action    String
  details   Json?
  timestamp DateTime    @default(now())
  ip        String
  userAgent String
  session   UserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([action])
  @@index([timestamp])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model Company {
  id          String             @id @default(cuid())
  name        String
  description String?
  address     String?
  phone       String?
  website     String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  createdById String
  clauses     Clause[]           @relation("CompanyClauses")
  createdBy   User               @relation("CreatedCompanies", fields: [createdById], references: [id])
  invites     CompanyInvite[]
  settings    CompanySettings?
  users       CompanyUser[]
  contracts   Contract[]
  templates   ContractTemplate[] @relation("CompanyTemplates")

  @@index([createdById])
  @@index([name])
  @@index([createdAt])
}

model CompanyUser {
  id        String   @id @default(cuid())
  role      String   @default("VIEWER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  companyId String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  company   Company  @relation(fields: [companyId], references: [id])

  @@unique([companyId, userId])
  @@index([companyId])
  @@index([userId])
  @@index([role])
}

model CompanyInvite {
  id          String   @id @default(cuid())
  email       String
  role        String   @default("VIEWER")
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  companyId   String
  invitedById String
  invitedBy   User     @relation("InvitedUser", fields: [invitedById], references: [id])
  company     Company  @relation(fields: [companyId], references: [id])

  @@unique([companyId, email])
  @@index([email])
  @@index([status])
  @@index([createdAt])
}

model CompanySettings {
  id                   String   @id @default(cuid())
  companyId            String   @unique
  defaultContractType  String?
  requireApproval      Boolean  @default(true)
  allowSelfApproval    Boolean  @default(false)
  notificationSettings Json?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  company              Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Contract {
  id                String               @id @default(cuid())
  title             String
  description       String?
  content           String?
  status            String               @default("DRAFT")
  type              String
  value             Float?
  startDate         DateTime?
  endDate           DateTime?
  expirationDate    DateTime?
  noticePeriodDays  Int?
  renewalDate       DateTime?
  reminderDays      Json?                @default("[90, 60, 30, 7]")
  autoRenewal       Boolean              @default(false)
  renewalStatus     String               @default("PENDING")
  lastReminderSent  DateTime?
  otherPartyName    String?
  otherPartyEmail   String?
  assignedToId      String?
  companyId         String?
  templateId        String?
  workflowTemplateId String?
  parentContractId  String?
  createdById       String
  updatedById       String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  clauses           ClausesOnContracts[]
  clauseUsages      ClauseUsage[]
  assignedTo        User?                @relation("AssignedContracts", fields: [assignedToId], references: [id])
  updatedBy         User?                @relation("UpdatedContracts", fields: [updatedById], references: [id])
  createdBy         User                 @relation("CreatedContracts", fields: [createdById], references: [id])
  parentContract    Contract?            @relation("Amendments", fields: [parentContractId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  amendments        Contract[]           @relation("Amendments")
  template          ContractTemplate?    @relation("TemplateContracts", fields: [templateId], references: [id])
  workflowTemplate  WorkflowTemplate?    @relation("ContractWorkflowTemplates", fields: [workflowTemplateId], references: [id])
  company           Company?             @relation(fields: [companyId], references: [id])
  approvals         ContractApproval[]
  attachments       ContractAttachment[]
  versions          ContractVersion[]
  digitalSignatures DigitalSignature[]
  notifications     Notification[]
  signaturePackage  SignaturePackage?

  @@index([status])
  @@index([type])
  @@index([assignedToId])
  @@index([companyId])
  @@index([createdById])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([startDate])
  @@index([endDate])
  @@index([expirationDate])
  @@index([renewalDate])
  @@index([renewalStatus])
  @@index([autoRenewal])
  @@index([status, companyId])
  @@index([type, status])
  @@index([createdById, status])
  @@index([assignedToId, status])
  @@index([endDate, renewalStatus])
  @@index([expirationDate, status])
  @@index([renewalDate, renewalStatus])
  @@index([parentContractId])
  @@index([title])
  @@index([otherPartyName])
}

model ContractAttachment {
  id           String   @id @default(cuid())
  contractId   String
  fileName     String
  originalName String
  url          String
  fileSize     Int
  mimeType     String
  uploadedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  uploadedBy   User     @relation("UploadedAttachments", fields: [uploadedById], references: [id])
  contract     Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractId])
  @@index([uploadedById])
  @@index([createdAt])
  @@index([mimeType])
}

model ContractTemplate {
  id          String     @id @default(cuid())
  title       String
  description String?
  category    String
  content     String
  variables   Json?
  isPublic    Boolean    @default(false)
  isActive    Boolean    @default(true)
  usageCount  Int        @default(0)
  createdById String
  companyId   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  contracts   Contract[] @relation("TemplateContracts")
  company     Company?   @relation("CompanyTemplates", fields: [companyId], references: [id])
  createdBy   User       @relation("CreatedTemplates", fields: [createdById], references: [id])

  @@index([category])
  @@index([isPublic])
  @@index([isActive])
  @@index([createdById])
  @@index([companyId])
  @@index([usageCount])
  @@index([title])
  @@index([createdAt])
}

model ContractApproval {
  id         String    @id @default(cuid())
  contractId String
  approverId String
  status     String    @default("PENDING")
  comment    String?
  approvedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  approver   User      @relation("ApprovalsByUser", fields: [approverId], references: [id])
  contract   Contract  @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@unique([contractId, approverId])
  @@index([contractId])
  @@index([approverId])
  @@index([status])
  @@index([createdAt])
  @@index([approvedAt])
}

model ContractVersion {
  id                String    @id @default(cuid())
  contractId        String
  versionNumber     String
  title             String
  description       String?
  content           String
  status            String
  value             Float?
  currency          String?
  startDate         DateTime?
  endDate           DateTime?
  changeType        String
  changeDescription String?
  changeLog         Json?
  createdById       String
  createdAt         DateTime  @default(now())
  createdBy         User      @relation(fields: [createdById], references: [id])
  contract          Contract  @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractId])
  @@index([versionNumber])
  @@index([createdById])
  @@index([changeType])
  @@index([createdAt])
  @@index([contractId, versionNumber])
  @@map("contract_versions")
}

model NotificationSettings {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  contractExpiring       Boolean  @default(true)
  contractExpired        Boolean  @default(true)
  contractReminder       Boolean  @default(true)
  approvalNeeded         Boolean  @default(true)
  approvalReceived       Boolean  @default(true)
  versionCreated         Boolean  @default(true)
  emailNotifications     Boolean  @default(true)
  dashboardNotifications Boolean  @default(true)
  reminderFrequency      String   @default("WEEKLY")
  daysBeforeExpiration   Int      @default(30)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

model Notification {
  id         String    @id @default(cuid())
  userId     String
  contractId String?
  type       String
  title      String
  message    String
  isRead     Boolean   @default(false)
  emailSent  Boolean   @default(false)
  metadata   Json?
  createdAt  DateTime  @default(now())
  contract   Contract? @relation(fields: [contractId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([contractId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@index([userId, isRead])
  @@index([userId, type])
  @@map("notifications")
}

model DigitalSignature {
  id              String    @id @default(cuid())
  contractId      String
  userId          String
  status          String    @default("PENDING")
  signedAt        DateTime?
  expiresAt       DateTime
  signatureData   String?
  certificateData String?
  ipAddress       String?
  userAgent       String?
  order           Int       @default(1)
  isRequired      Boolean   @default(true)
  declineReason   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
  contract        Contract  @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@unique([contractId, userId])
  @@index([contractId])
  @@index([userId])
  @@index([status])
  @@index([signedAt])
  @@index([expiresAt])
  @@index([order])
  @@index([contractId, order])
  @@map("digital_signatures")
}

model SignaturePackage {
  id          String    @id @default(cuid())
  contractId  String    @unique
  title       String
  description String?
  status      String    @default("DRAFT")
  expiresAt   DateTime?
  completedAt DateTime?
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation(fields: [createdById], references: [id])
  contract    Contract  @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([createdById])
  @@index([expiresAt])
  @@index([completedAt])
  @@index([createdAt])
  @@map("signature_packages")
}

model Clause {
  id             String           @id @default(cuid())
  title          String
  description    String?
  content        String
  category       String
  visibility     String           @default("COMPANY")
  approvalStatus String           @default("DRAFT")
  isActive       Boolean          @default(true)
  version        Int              @default(1)
  usageCount     Int              @default(0)
  createdById    String
  companyId      String?
  parentClauseId String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  contracts      ClausesOnContracts[]
  parentClause   Clause?          @relation("ClauseInheritance", fields: [parentClauseId], references: [id])
  childClauses   Clause[]         @relation("ClauseInheritance")
  company        Company?         @relation("CompanyClauses", fields: [companyId], references: [id])
  createdBy      User             @relation("CreatedClauses", fields: [createdById], references: [id])
  approvals      ClauseApproval[]
  usageStats     ClauseUsage[]
  variables      ClauseVariable[]

  @@index([category])
  @@index([visibility])
  @@index([companyId])
  @@index([createdById])
  @@index([approvalStatus])
  @@index([isActive])
}

model ClauseVariable {
  id           String   @id @default(cuid())
  name         String
  label        String
  type         String   @default("STRING")
  defaultValue String?
  isRequired   Boolean  @default(false)
  description  String?
  validation   Json?
  clauseId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  clause       Clause   @relation(fields: [clauseId], references: [id], onDelete: Cascade)

  @@index([clauseId])
  @@index([name])
}

model ClauseUsage {
  id           String   @id @default(cuid())
  clauseId     String
  contractId   String
  userId       String
  contractType String?
  position     Int?
  usedAt       DateTime @default(now())
  user         User     @relation("ClauseUsages", fields: [userId], references: [id])
  contract     Contract @relation(fields: [contractId], references: [id])
  clause       Clause   @relation(fields: [clauseId], references: [id])

  @@index([clauseId])
  @@index([contractId])
  @@index([userId])
  @@index([usedAt])
}

model ClauseApproval {
  id         String   @id @default(cuid())
  status     String
  comments   String?
  clauseId   String
  approverId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  approver   User     @relation("ClauseApprovals", fields: [approverId], references: [id])
  clause     Clause   @relation(fields: [clauseId], references: [id])

  @@index([clauseId])
  @@index([approverId])
  @@index([status])
}

model Team {
  id                    String                 @id @default(cuid())
  name                  String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  members               UsersOnTeams[]
  workflowTemplateSteps WorkflowTemplateStep[]
}

model UsersOnTeams {
  userId    String
  teamId    String
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
}

model SavedReport {
  id            String          @id @default(cuid())
  name          String
  description   String?
  configuration Json            // Raporun tüm ayarlarını (fields, filters, viz, vb.) JSON olarak saklayacağız
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  author        User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  
  // Zamanlama ilişkisi
  schedule      ReportSchedule?

  @@index([authorId])
  @@index([createdAt])
  @@map("saved_reports")
}

model ReportSchedule {
  id            String   @id @default(cuid())
  cron          String   // '0 9 * * 1' gibi cron formatında zamanlama string'i
  recipients    Json     // E-posta gönderilecek adreslerin JSON array'i
  status        String   @default("ACTIVE") // "ACTIVE" veya "PAUSED"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Her zamanlamanın bir tane kaydedilmiş raporu olur
  savedReport   SavedReport @relation(fields: [savedReportId], references: [id], onDelete: Cascade)
  savedReportId String      @unique // Her raporun sadece bir zamanlaması olabilir

  // Loglar - en yeniden eskiye doğru sıralı
  logs          ScheduleLog[]

  @@index([status])
  @@index([createdAt])
  @@map("report_schedules")
}

model ScheduleLog {
  id            String   @id @default(cuid())
  status        String   // "SUCCESS" veya "FAILURE"
  details       String?  // Hata mesajları veya başarı detayları için
  executedAt    DateTime @default(now())

  schedule      ReportSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId    String

  @@index([scheduleId])
  @@index([executedAt])
  @@index([status])
  @@map("schedule_logs")
}

model ClausesOnContracts {
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  contractId String
  clause     Clause   @relation(fields: [clauseId], references: [id], onDelete: Cascade)
  clauseId   String
  addedAt    DateTime @default(now())
  isModified Boolean  @default(false)

  @@id([contractId, clauseId])
  @@index([contractId])
  @@index([clauseId])
  @@index([addedAt])
  @@index([isModified])
}

model WorkflowTemplate {
  id          String                 @id @default(cuid())
  name        String                 @unique // Örn: "Pazarlama Ajansı Sözleşmesi Akışı"
  description String?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  steps       WorkflowTemplateStep[]
  contracts   Contract[]             @relation("ContractWorkflowTemplates")

  @@index([name])
  @@index([createdAt])
}

model WorkflowTemplateStep {
  id        String   @id @default(cuid())
  order     Int      // Adımın sırası (1, 2, 3...)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDynamicApprover Boolean @default(false) // Bu adımın dinamik olup olmadığını belirtir

  template   WorkflowTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String

  // Onaycı bir Takım mı yoksa genel bir Rol mü? Sadece biri dolu olacak.
  teamId       String?
  team         Team?   @relation(fields: [teamId], references: [id])
  approverRole String? // ADMIN, EDITOR, VIEWER gibi roller

  @@unique([templateId, order])
  @@index([templateId])
  @@index([order])
  @@index([teamId])
  @@index([approverRole])
}
